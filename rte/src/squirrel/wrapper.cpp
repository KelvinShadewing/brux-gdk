/**
 * WARNING: This file is automatically generated from:
 *  'src/api/api.hpp'
 * DO NOT CHANGE
 */

#include "squirrel/wrapper.hpp"

#include <assert.h>
#include <limits>
#include <sstream>
#include <squirrel.h>

#include "api/api.hpp"

#include "squirrel/squirrel_error.hpp"

namespace BruxAPI {
namespace Wrapper {

static SQInteger loadSound_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::loadSound(arg0);

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'loadSound'"));
    return SQ_ERROR;
  }

}

static SQInteger loadMusic_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::loadMusic(arg0);

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'loadMusic'"));
    return SQ_ERROR;
  }

}

static SQInteger playSound_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::playSound(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'playSound'"));
    return SQ_ERROR;
  }

}

static SQInteger playSoundChannel_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::playSoundChannel(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'playSoundChannel'"));
    return SQ_ERROR;
  }

}

static SQInteger playMusic_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::playMusic(static_cast<int> (arg0), static_cast<int> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'playMusic'"));
    return SQ_ERROR;
  }

}

static SQInteger deleteSound_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::deleteSound(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'deleteSound'"));
    return SQ_ERROR;
  }

}

static SQInteger deleteMusic_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::deleteMusic(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'deleteMusic'"));
    return SQ_ERROR;
  }

}

static SQInteger stopSound_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::stopSound(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'stopSound'"));
    return SQ_ERROR;
  }

}

static SQInteger stopMusic_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    BruxAPI::stopMusic();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'stopMusic'"));
    return SQ_ERROR;
  }

}

static SQInteger stopChannel_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::stopChannel(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'stopChannel'"));
    return SQ_ERROR;
  }

}

static SQInteger checkSound_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::checkSound(static_cast<int> (arg0));

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'checkSound'"));
    return SQ_ERROR;
  }

}

static SQInteger checkMusic_wrapper(HSQUIRRELVM vm)
{

  try {
    bool return_value = BruxAPI::checkMusic();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'checkMusic'"));
    return SQ_ERROR;
  }

}

static SQInteger setMaxChannels_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setMaxChannels(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setMaxChannels'"));
    return SQ_ERROR;
  }

}

static SQInteger pauseMusic_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    BruxAPI::pauseMusic();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'pauseMusic'"));
    return SQ_ERROR;
  }

}

static SQInteger resumeMusic_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    BruxAPI::resumeMusic();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'resumeMusic'"));
    return SQ_ERROR;
  }

}

static SQInteger musicPaused_wrapper(HSQUIRRELVM vm)
{

  try {
    bool return_value = BruxAPI::musicPaused();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'musicPaused'"));
    return SQ_ERROR;
  }

}

static SQInteger fadeMusic_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::fadeMusic(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fadeMusic'"));
    return SQ_ERROR;
  }

}

static SQInteger setMusicVolume_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setMusicVolume(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setMusicVolume'"));
    return SQ_ERROR;
  }

}

static SQInteger setSoundVolume_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setSoundVolume(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setSoundVolume'"));
    return SQ_ERROR;
  }

}

static SQInteger getMusicVolume_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::getMusicVolume();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getMusicVolume'"));
    return SQ_ERROR;
  }

}

static SQInteger getSoundVolume_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::getSoundVolume();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getSoundVolume'"));
    return SQ_ERROR;
  }

}

static SQInteger import_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::import(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'import'"));
    return SQ_ERROR;
  }

}

static SQInteger donut_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::donut(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'donut'"));
    return SQ_ERROR;
  }

}

static SQInteger dostr_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::dostr(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'dostr'"));
    return SQ_ERROR;
  }

}

static SQInteger mount_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  const SQChar* arg1;
  if(SQ_FAILED(sq_getstring(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a string"));
    return SQ_ERROR;
  }
  SQBool arg2;
  if(SQ_FAILED(sq_getbool(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a bool"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::mount(arg0, arg1, arg2 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'mount'"));
    return SQ_ERROR;
  }

}

static SQInteger unmount_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::unmount(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'unmount'"));
    return SQ_ERROR;
  }

}

static SQInteger getdir_wrapper(HSQUIRRELVM vm)
{

  try {
    std::string return_value = BruxAPI::getdir();

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getdir'"));
    return SQ_ERROR;
  }

}

static SQInteger getWriteDir_wrapper(HSQUIRRELVM vm)
{

  try {
    std::string return_value = BruxAPI::getWriteDir();

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getWriteDir'"));
    return SQ_ERROR;
  }

}

static SQInteger getPrefDir_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  const SQChar* arg1;
  if(SQ_FAILED(sq_getstring(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a string"));
    return SQ_ERROR;
  }

  try {
    std::string return_value = BruxAPI::getPrefDir(arg0, arg1);

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getPrefDir'"));
    return SQ_ERROR;
  }

}

static SQInteger setWriteDir_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setWriteDir(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setWriteDir'"));
    return SQ_ERROR;
  }

}

static SQInteger createDir_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::createDir(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'createDir'"));
    return SQ_ERROR;
  }

}

static SQInteger fileRead_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    std::string return_value = BruxAPI::fileRead(arg0);

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fileRead'"));
    return SQ_ERROR;
  }

}

static SQInteger fileWrite_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  const SQChar* arg1;
  if(SQ_FAILED(sq_getstring(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::fileWrite(arg0, arg1);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fileWrite'"));
    return SQ_ERROR;
  }

}

static SQInteger fileAppend_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  const SQChar* arg1;
  if(SQ_FAILED(sq_getstring(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::fileAppend(arg0, arg1);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fileAppend'"));
    return SQ_ERROR;
  }

}

static SQInteger fileExists_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::fileExists(arg0);

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fileExists'"));
    return SQ_ERROR;
  }

}

static SQInteger fileDelete_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::fileDelete(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'fileDelete'"));
    return SQ_ERROR;
  }

}

static SQInteger isdir_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::isdir(arg0);

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'isdir'"));
    return SQ_ERROR;
  }

}

static SQInteger lsdir_wrapper(HSQUIRRELVM vm)
{
  HSQUIRRELVM arg0 = vm;
  const SQChar* arg1;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg1))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    SQInteger return_value = BruxAPI::lsdir(arg0, arg1);

    return return_value;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'lsdir'"));
    return SQ_ERROR;
  }

}

static SQInteger clearScreen_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    BruxAPI::clearScreen();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'clearScreen'"));
    return SQ_ERROR;
  }

}

static SQInteger setDrawTarget_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setDrawTarget(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setDrawTarget'"));
    return SQ_ERROR;
  }

}

static SQInteger getDrawTarget_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::getDrawTarget();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getDrawTarget'"));
    return SQ_ERROR;
  }

}

static SQInteger resetDrawTarget_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    BruxAPI::resetDrawTarget();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'resetDrawTarget'"));
    return SQ_ERROR;
  }

}

static SQInteger drawImage_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawImage(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawImage'"));
    return SQ_ERROR;
  }

}

static SQInteger drawImagePart_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg5;
  if(SQ_FAILED(sq_getinteger(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg6;
  if(SQ_FAILED(sq_getinteger(vm, 8, &arg6))) {
    sq_throwerror(vm, _SC("Argument 7 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawImagePart(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3), static_cast<int> (arg4), static_cast<int> (arg5), static_cast<int> (arg6));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawImagePart'"));
    return SQ_ERROR;
  }

}

static SQInteger drawImageEx_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQFloat arg3;
  if(SQ_FAILED(sq_getfloat(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a float"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg5;
  if(SQ_FAILED(sq_getinteger(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg6;
  if(SQ_FAILED(sq_getinteger(vm, 8, &arg6))) {
    sq_throwerror(vm, _SC("Argument 7 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg7;
  if(SQ_FAILED(sq_getinteger(vm, 9, &arg7))) {
    sq_throwerror(vm, _SC("Argument 8 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawImageEx(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), arg3, static_cast<int> (arg4), static_cast<int> (arg5), static_cast<int> (arg6), static_cast<int> (arg7));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawImageEx'"));
    return SQ_ERROR;
  }

}

static SQInteger setDrawColor_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setDrawColor(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setDrawColor'"));
    return SQ_ERROR;
  }

}

static SQInteger loadImage_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::loadImage(arg0);

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'loadImage'"));
    return SQ_ERROR;
  }

}

static SQInteger loadImageKey_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::loadImageKey(arg0, static_cast<int> (arg1));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'loadImageKey'"));
    return SQ_ERROR;
  }

}

static SQInteger setBackgroundColor_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setBackgroundColor(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setBackgroundColor'"));
    return SQ_ERROR;
  }

}

static SQInteger setScaling_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setScaling(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setScaling'"));
    return SQ_ERROR;
  }

}

static SQInteger setScalingFilter_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setScalingFilter(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setScalingFilter'"));
    return SQ_ERROR;
  }

}

static SQInteger setResolution_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setResolution(static_cast<int> (arg0), static_cast<int> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setResolution'"));
    return SQ_ERROR;
  }

}

static SQInteger screenW_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::screenW();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'screenW'"));
    return SQ_ERROR;
  }

}

static SQInteger screenH_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::screenH();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'screenH'"));
    return SQ_ERROR;
  }

}

static SQInteger windowW_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::windowW();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'windowW'"));
    return SQ_ERROR;
  }

}

static SQInteger windowH_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::windowH();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'windowH'"));
    return SQ_ERROR;
  }

}

static SQInteger newTexture_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::newTexture(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'newTexture'"));
    return SQ_ERROR;
  }

}

static SQInteger textureSetBlendMode_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::textureSetBlendMode(static_cast<int> (arg0), static_cast<int> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'textureSetBlendMode'"));
    return SQ_ERROR;
  }

}

static SQInteger keyPress_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::keyPress(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'keyPress'"));
    return SQ_ERROR;
  }

}

static SQInteger keyDown_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::keyDown(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'keyDown'"));
    return SQ_ERROR;
  }

}

static SQInteger keyRelease_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::keyRelease(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'keyRelease'"));
    return SQ_ERROR;
  }

}

static SQInteger keyPressAny_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::keyPressAny();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'keyPressAny'"));
    return SQ_ERROR;
  }

}

static SQInteger mouseDown_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::mouseDown(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'mouseDown'"));
    return SQ_ERROR;
  }

}

static SQInteger mousePress_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::mousePress(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'mousePress'"));
    return SQ_ERROR;
  }

}

static SQInteger mouseRelease_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::mouseRelease(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'mouseRelease'"));
    return SQ_ERROR;
  }

}

static SQInteger mouseX_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::mouseX();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'mouseX'"));
    return SQ_ERROR;
  }

}

static SQInteger mouseY_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::mouseY();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'mouseY'"));
    return SQ_ERROR;
  }

}

static SQInteger getQuit_wrapper(HSQUIRRELVM vm)
{

  try {
    bool return_value = BruxAPI::getQuit();

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getQuit'"));
    return SQ_ERROR;
  }

}

static SQInteger joyCount_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::joyCount();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyCount'"));
    return SQ_ERROR;
  }

}

static SQInteger joyName_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    std::string return_value = BruxAPI::joyName(static_cast<int> (arg0));

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyName'"));
    return SQ_ERROR;
  }

}

static SQInteger joyX_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyX(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyX'"));
    return SQ_ERROR;
  }

}

static SQInteger joyY_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyY(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyY'"));
    return SQ_ERROR;
  }

}

static SQInteger joyZ_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyZ(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyZ'"));
    return SQ_ERROR;
  }

}

static SQInteger joyH_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyH(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyH'"));
    return SQ_ERROR;
  }

}

static SQInteger joyV_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyV(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyV'"));
    return SQ_ERROR;
  }

}

static SQInteger joyR_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyR(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyR'"));
    return SQ_ERROR;
  }

}

static SQInteger joyL_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyL(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyL'"));
    return SQ_ERROR;
  }

}

static SQInteger joyAxis_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyAxis(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyAxis'"));
    return SQ_ERROR;
  }

}

static SQInteger joyHatDown_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::joyHatDown(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyHatDown'"));
    return SQ_ERROR;
  }

}

static SQInteger joyHatPress_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::joyHatPress(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyHatPress'"));
    return SQ_ERROR;
  }

}

static SQInteger joyHatRelease_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::joyHatRelease(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyHatRelease'"));
    return SQ_ERROR;
  }

}

static SQInteger joyButtonPress_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyButtonPress(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyButtonPress'"));
    return SQ_ERROR;
  }

}

static SQInteger joyButtonDown_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyButtonDown(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyButtonDown'"));
    return SQ_ERROR;
  }

}

static SQInteger joyButtonRelease_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyButtonRelease(static_cast<int> (arg0), static_cast<int> (arg1));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyButtonRelease'"));
    return SQ_ERROR;
  }

}

static SQInteger joyPressAny_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyPressAny(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyPressAny'"));
    return SQ_ERROR;
  }

}

static SQInteger joyAxisPress_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyAxisPress(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyAxisPress'"));
    return SQ_ERROR;
  }

}

static SQInteger joyAxisRelease_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::joyAxisRelease(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'joyAxisRelease'"));
    return SQ_ERROR;
  }

}

static SQInteger keyString_wrapper(HSQUIRRELVM vm)
{

  try {
    std::string return_value = BruxAPI::keyString();

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'keyString'"));
    return SQ_ERROR;
  }

}

static SQInteger mouseWheelX_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::mouseWheelX();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'mouseWheelX'"));
    return SQ_ERROR;
  }

}

static SQInteger mouseWheelY_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::mouseWheelY();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'mouseWheelY'"));
    return SQ_ERROR;
  }

}

static SQInteger jsonRead_wrapper(HSQUIRRELVM vm)
{
  HSQUIRRELVM arg0 = vm;
  const SQChar* arg1;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg1))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    SQInteger return_value = BruxAPI::jsonRead(arg0, arg1);

    return return_value;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'jsonRead'"));
    return SQ_ERROR;
  }

}

static SQInteger wait_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::wait(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'wait'"));
    return SQ_ERROR;
  }

}

static SQInteger update_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    BruxAPI::update();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'update'"));
    return SQ_ERROR;
  }

}

static SQInteger getOS_wrapper(HSQUIRRELVM vm)
{

  try {
    std::string return_value = BruxAPI::getOS();

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getOS'"));
    return SQ_ERROR;
  }

}

static SQInteger getTicks_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::getTicks();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getTicks'"));
    return SQ_ERROR;
  }

}

static SQInteger getFPS_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::getFPS();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getFPS'"));
    return SQ_ERROR;
  }

}

static SQInteger setFPS_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setFPS(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setFPS'"));
    return SQ_ERROR;
  }

}

static SQInteger setWindowTitle_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setWindowTitle(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setWindowTitle'"));
    return SQ_ERROR;
  }

}

static SQInteger setWindowIcon_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::setWindowIcon(arg0);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'setWindowIcon'"));
    return SQ_ERROR;
  }

}

static SQInteger getFrames_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::getFrames();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'getFrames'"));
    return SQ_ERROR;
  }

}

static SQInteger displayW_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::displayW();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'displayW'"));
    return SQ_ERROR;
  }

}

static SQInteger displayH_wrapper(HSQUIRRELVM vm)
{

  try {
    int return_value = BruxAPI::displayH();

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'displayH'"));
    return SQ_ERROR;
  }

}

static SQInteger bruxVersion_wrapper(HSQUIRRELVM vm)
{

  try {
    std::string return_value = BruxAPI::bruxVersion();

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'bruxVersion'"));
    return SQ_ERROR;
  }

}

static SQInteger toggleFullscreen_wrapper(HSQUIRRELVM vm)
{
  (void) vm;

  try {
    BruxAPI::toggleFullscreen();

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'toggleFullscreen'"));
    return SQ_ERROR;
  }

}

static SQInteger randFloat_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    float return_value = BruxAPI::randFloat(arg0);

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'randFloat'"));
    return SQ_ERROR;
  }

}

static SQInteger randInt_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::randInt(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'randInt'"));
    return SQ_ERROR;
  }

}

static SQInteger distance2_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg3;
  if(SQ_FAILED(sq_getfloat(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a float"));
    return SQ_ERROR;
  }

  try {
    float return_value = BruxAPI::distance2(arg0, arg1, arg2, arg3);

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'distance2'"));
    return SQ_ERROR;
  }

}

static SQInteger inDistance2_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg3;
  if(SQ_FAILED(sq_getfloat(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg4;
  if(SQ_FAILED(sq_getfloat(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not a float"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::inDistance2(arg0, arg1, arg2, arg3, arg4);

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'inDistance2'"));
    return SQ_ERROR;
  }

}

static SQInteger distance3_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg3;
  if(SQ_FAILED(sq_getfloat(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg4;
  if(SQ_FAILED(sq_getfloat(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg5;
  if(SQ_FAILED(sq_getfloat(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not a float"));
    return SQ_ERROR;
  }

  try {
    float return_value = BruxAPI::distance3(arg0, arg1, arg2, arg3, arg4, arg5);

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'distance3'"));
    return SQ_ERROR;
  }

}

static SQInteger wrap_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }

  try {
    float return_value = BruxAPI::wrap(arg0, arg1, arg2);

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'wrap'"));
    return SQ_ERROR;
  }

}

static SQInteger floor_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::floor(arg0);

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'floor'"));
    return SQ_ERROR;
  }

}

static SQInteger ceil_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::ceil(arg0);

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'ceil'"));
    return SQ_ERROR;
  }

}

static SQInteger round_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::round(arg0);

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'round'"));
    return SQ_ERROR;
  }

}

static SQInteger pointAngle_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg3;
  if(SQ_FAILED(sq_getfloat(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a float"));
    return SQ_ERROR;
  }

  try {
    float return_value = BruxAPI::pointAngle(arg0, arg1, arg2, arg3);

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'pointAngle'"));
    return SQ_ERROR;
  }

}

static SQInteger abs_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }

  try {
    float return_value = BruxAPI::abs(arg0);

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'abs'"));
    return SQ_ERROR;
  }

}

static SQInteger lendirX_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }

  try {
    float return_value = BruxAPI::lendirX(arg0, arg1);

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'lendirX'"));
    return SQ_ERROR;
  }

}

static SQInteger lendirY_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }

  try {
    float return_value = BruxAPI::lendirY(arg0, arg1);

    sq_pushfloat(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'lendirY'"));
    return SQ_ERROR;
  }

}

static SQInteger binstr_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    std::string return_value = BruxAPI::binstr(static_cast<int> (arg0));

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'binstr'"));
    return SQ_ERROR;
  }

}

static SQInteger drawCircle_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQBool arg3;
  if(SQ_FAILED(sq_getbool(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a bool"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawCircle(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), arg3 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawCircle'"));
    return SQ_ERROR;
  }

}

static SQInteger drawRec_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQBool arg4;
  if(SQ_FAILED(sq_getbool(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not a bool"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawRec(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3), arg4 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawRec'"));
    return SQ_ERROR;
  }

}

static SQInteger drawRect_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQBool arg4;
  if(SQ_FAILED(sq_getbool(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not a bool"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawRect(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3), arg4 == SQTrue);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawRect'"));
    return SQ_ERROR;
  }

}

static SQInteger drawPoint_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawPoint(static_cast<int> (arg0), static_cast<int> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawPoint'"));
    return SQ_ERROR;
  }

}

static SQInteger drawLine_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawLine(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawLine'"));
    return SQ_ERROR;
  }

}

static SQInteger drawLineWide_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawLineWide(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3), static_cast<int> (arg4));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawLineWide'"));
    return SQ_ERROR;
  }

}

static SQInteger hitLineLine_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg3;
  if(SQ_FAILED(sq_getfloat(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg4;
  if(SQ_FAILED(sq_getfloat(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg5;
  if(SQ_FAILED(sq_getfloat(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg6;
  if(SQ_FAILED(sq_getfloat(vm, 8, &arg6))) {
    sq_throwerror(vm, _SC("Argument 7 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg7;
  if(SQ_FAILED(sq_getfloat(vm, 9, &arg7))) {
    sq_throwerror(vm, _SC("Argument 8 not a float"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::hitLineLine(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'hitLineLine'"));
    return SQ_ERROR;
  }

}

static SQInteger hitLineCircle_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg3;
  if(SQ_FAILED(sq_getfloat(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg4;
  if(SQ_FAILED(sq_getfloat(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg5;
  if(SQ_FAILED(sq_getfloat(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg6;
  if(SQ_FAILED(sq_getfloat(vm, 8, &arg6))) {
    sq_throwerror(vm, _SC("Argument 7 not a float"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::hitLineCircle(arg0, arg1, arg2, arg3, arg4, arg5, arg6);

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'hitLineCircle'"));
    return SQ_ERROR;
  }

}

static SQInteger hitLinePoint_wrapper(HSQUIRRELVM vm)
{
  SQFloat arg0;
  if(SQ_FAILED(sq_getfloat(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg3;
  if(SQ_FAILED(sq_getfloat(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg4;
  if(SQ_FAILED(sq_getfloat(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg5;
  if(SQ_FAILED(sq_getfloat(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not a float"));
    return SQ_ERROR;
  }

  try {
    bool return_value = BruxAPI::hitLinePoint(arg0, arg1, arg2, arg3, arg4, arg5);

    sq_pushbool(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'hitLinePoint'"));
    return SQ_ERROR;
  }

}

static SQInteger spriteName_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    std::string return_value = BruxAPI::spriteName(static_cast<int> (arg0));

    assert(return_value.size() < static_cast<size_t>(std::numeric_limits<SQInteger>::max()));
    sq_pushstring(vm, return_value.c_str(), static_cast<SQInteger>(return_value.size()));
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'spriteName'"));
    return SQ_ERROR;
  }

}

static SQInteger findSprite_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::findSprite(arg0);

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'findSprite'"));
    return SQ_ERROR;
  }

}

static SQInteger newSprite_wrapper(HSQUIRRELVM vm)
{
  const SQChar* arg0;
  if(SQ_FAILED(sq_getstring(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not a string"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }
  SQFloat arg5;
  if(SQ_FAILED(sq_getfloat(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg6;
  if(SQ_FAILED(sq_getfloat(vm, 8, &arg6))) {
    sq_throwerror(vm, _SC("Argument 7 not a float"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::newSprite(arg0, static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3), static_cast<int> (arg4), arg5, arg6);

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'newSprite'"));
    return SQ_ERROR;
  }

}

static SQInteger newSpriteFT_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }
  SQFloat arg5;
  if(SQ_FAILED(sq_getfloat(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg6;
  if(SQ_FAILED(sq_getfloat(vm, 8, &arg6))) {
    sq_throwerror(vm, _SC("Argument 7 not a float"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::newSpriteFT(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3), static_cast<int> (arg4), arg5, arg6);

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'newSpriteFT'"));
    return SQ_ERROR;
  }

}

static SQInteger drawSprite_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawSprite(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawSprite'"));
    return SQ_ERROR;
  }

}

static SQInteger drawSpriteEx_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg5;
  if(SQ_FAILED(sq_getinteger(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not an integer"));
    return SQ_ERROR;
  }
  SQFloat arg6;
  if(SQ_FAILED(sq_getfloat(vm, 8, &arg6))) {
    sq_throwerror(vm, _SC("Argument 7 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg7;
  if(SQ_FAILED(sq_getfloat(vm, 9, &arg7))) {
    sq_throwerror(vm, _SC("Argument 8 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg8;
  if(SQ_FAILED(sq_getfloat(vm, 10, &arg8))) {
    sq_throwerror(vm, _SC("Argument 9 not a float"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawSpriteEx(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3), static_cast<int> (arg4), static_cast<int> (arg5), arg6, arg7, arg8);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawSpriteEx'"));
    return SQ_ERROR;
  }

}

static SQInteger drawSpriteMod_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawSpriteMod(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3), static_cast<int> (arg4));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawSpriteMod'"));
    return SQ_ERROR;
  }

}

static SQInteger drawSpriteExMod_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg5;
  if(SQ_FAILED(sq_getinteger(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not an integer"));
    return SQ_ERROR;
  }
  SQFloat arg6;
  if(SQ_FAILED(sq_getfloat(vm, 8, &arg6))) {
    sq_throwerror(vm, _SC("Argument 7 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg7;
  if(SQ_FAILED(sq_getfloat(vm, 9, &arg7))) {
    sq_throwerror(vm, _SC("Argument 8 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg8;
  if(SQ_FAILED(sq_getfloat(vm, 10, &arg8))) {
    sq_throwerror(vm, _SC("Argument 9 not a float"));
    return SQ_ERROR;
  }
  SQInteger arg9;
  if(SQ_FAILED(sq_getinteger(vm, 11, &arg9))) {
    sq_throwerror(vm, _SC("Argument 10 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawSpriteExMod(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), static_cast<int> (arg3), static_cast<int> (arg4), static_cast<int> (arg5), arg6, arg7, arg8, static_cast<int> (arg9));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawSpriteExMod'"));
    return SQ_ERROR;
  }

}

static SQInteger deleteSprite_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::deleteSprite(static_cast<int> (arg0));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'deleteSprite'"));
    return SQ_ERROR;
  }

}

static SQInteger spriteW_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::spriteW(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'spriteW'"));
    return SQ_ERROR;
  }

}

static SQInteger spriteH_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::spriteH(static_cast<int> (arg0));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'spriteH'"));
    return SQ_ERROR;
  }

}

static SQInteger replaceSprite_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  const SQChar* arg1;
  if(SQ_FAILED(sq_getstring(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a string"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg3;
  if(SQ_FAILED(sq_getinteger(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg5;
  if(SQ_FAILED(sq_getinteger(vm, 7, &arg5))) {
    sq_throwerror(vm, _SC("Argument 6 not an integer"));
    return SQ_ERROR;
  }
  SQFloat arg6;
  if(SQ_FAILED(sq_getfloat(vm, 8, &arg6))) {
    sq_throwerror(vm, _SC("Argument 7 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg7;
  if(SQ_FAILED(sq_getfloat(vm, 9, &arg7))) {
    sq_throwerror(vm, _SC("Argument 8 not a float"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::replaceSprite(static_cast<int> (arg0), arg1, static_cast<int> (arg2), static_cast<int> (arg3), static_cast<int> (arg4), static_cast<int> (arg5), arg6, arg7);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'replaceSprite'"));
    return SQ_ERROR;
  }

}

static SQInteger spriteSetBlendMode_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::spriteSetBlendMode(static_cast<int> (arg0), static_cast<int> (arg1));

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'spriteSetBlendMode'"));
    return SQ_ERROR;
  }

}

static SQInteger newFont_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not an integer"));
    return SQ_ERROR;
  }
  SQInteger arg2;
  if(SQ_FAILED(sq_getinteger(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not an integer"));
    return SQ_ERROR;
  }
  SQBool arg3;
  if(SQ_FAILED(sq_getbool(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a bool"));
    return SQ_ERROR;
  }
  SQInteger arg4;
  if(SQ_FAILED(sq_getinteger(vm, 6, &arg4))) {
    sq_throwerror(vm, _SC("Argument 5 not an integer"));
    return SQ_ERROR;
  }

  try {
    int return_value = BruxAPI::newFont(static_cast<int> (arg0), static_cast<int> (arg1), static_cast<int> (arg2), arg3 == SQTrue, static_cast<int> (arg4));

    sq_pushinteger(vm, return_value);
    return 1;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'newFont'"));
    return SQ_ERROR;
  }

}

static SQInteger drawText_wrapper(HSQUIRRELVM vm)
{
  SQInteger arg0;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg0))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }
  SQFloat arg1;
  if(SQ_FAILED(sq_getfloat(vm, 3, &arg1))) {
    sq_throwerror(vm, _SC("Argument 2 not a float"));
    return SQ_ERROR;
  }
  SQFloat arg2;
  if(SQ_FAILED(sq_getfloat(vm, 4, &arg2))) {
    sq_throwerror(vm, _SC("Argument 3 not a float"));
    return SQ_ERROR;
  }
  const SQChar* arg3;
  if(SQ_FAILED(sq_getstring(vm, 5, &arg3))) {
    sq_throwerror(vm, _SC("Argument 4 not a string"));
    return SQ_ERROR;
  }

  try {
    BruxAPI::drawText(static_cast<int> (arg0), arg1, arg2, arg3);

    return 0;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'drawText'"));
    return SQ_ERROR;
  }

}

static SQInteger chint_wrapper(HSQUIRRELVM vm)
{
  HSQUIRRELVM arg0 = vm;
  SQInteger arg1;
  if(SQ_FAILED(sq_getinteger(vm, 2, &arg1))) {
    sq_throwerror(vm, _SC("Argument 1 not an integer"));
    return SQ_ERROR;
  }

  try {
    SQInteger return_value = BruxAPI::chint(arg0, static_cast<int> (arg1));

    return return_value;

  } catch(std::exception& e) {
    sq_throwerror(vm, e.what());
    return SQ_ERROR;
  } catch(...) {
    sq_throwerror(vm, _SC("Unexpected exception while executing function 'chint'"));
    return SQ_ERROR;
  }

}

} // namespace wrapper
void register_brux_wrapper(HSQUIRRELVM v)
{
  using namespace Wrapper;

  sq_pushstring(v, "loadSound", -1);
  sq_newclosure(v, &loadSound_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'loadSound'");
  }

  sq_pushstring(v, "loadMusic", -1);
  sq_newclosure(v, &loadMusic_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'loadMusic'");
  }

  sq_pushstring(v, "playSound", -1);
  sq_newclosure(v, &playSound_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'playSound'");
  }

  sq_pushstring(v, "playSoundChannel", -1);
  sq_newclosure(v, &playSoundChannel_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'playSoundChannel'");
  }

  sq_pushstring(v, "playMusic", -1);
  sq_newclosure(v, &playMusic_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'playMusic'");
  }

  sq_pushstring(v, "deleteSound", -1);
  sq_newclosure(v, &deleteSound_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'deleteSound'");
  }

  sq_pushstring(v, "deleteMusic", -1);
  sq_newclosure(v, &deleteMusic_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'deleteMusic'");
  }

  sq_pushstring(v, "stopSound", -1);
  sq_newclosure(v, &stopSound_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'stopSound'");
  }

  sq_pushstring(v, "stopMusic", -1);
  sq_newclosure(v, &stopMusic_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'stopMusic'");
  }

  sq_pushstring(v, "stopChannel", -1);
  sq_newclosure(v, &stopChannel_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'stopChannel'");
  }

  sq_pushstring(v, "checkSound", -1);
  sq_newclosure(v, &checkSound_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'checkSound'");
  }

  sq_pushstring(v, "checkMusic", -1);
  sq_newclosure(v, &checkMusic_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'checkMusic'");
  }

  sq_pushstring(v, "setMaxChannels", -1);
  sq_newclosure(v, &setMaxChannels_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setMaxChannels'");
  }

  sq_pushstring(v, "pauseMusic", -1);
  sq_newclosure(v, &pauseMusic_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'pauseMusic'");
  }

  sq_pushstring(v, "resumeMusic", -1);
  sq_newclosure(v, &resumeMusic_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'resumeMusic'");
  }

  sq_pushstring(v, "musicPaused", -1);
  sq_newclosure(v, &musicPaused_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'musicPaused'");
  }

  sq_pushstring(v, "fadeMusic", -1);
  sq_newclosure(v, &fadeMusic_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fadeMusic'");
  }

  sq_pushstring(v, "setMusicVolume", -1);
  sq_newclosure(v, &setMusicVolume_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setMusicVolume'");
  }

  sq_pushstring(v, "setSoundVolume", -1);
  sq_newclosure(v, &setSoundVolume_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setSoundVolume'");
  }

  sq_pushstring(v, "getMusicVolume", -1);
  sq_newclosure(v, &getMusicVolume_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getMusicVolume'");
  }

  sq_pushstring(v, "getSoundVolume", -1);
  sq_newclosure(v, &getSoundVolume_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getSoundVolume'");
  }

  sq_pushstring(v, "import", -1);
  sq_newclosure(v, &import_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'import'");
  }

  sq_pushstring(v, "donut", -1);
  sq_newclosure(v, &donut_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'donut'");
  }

  sq_pushstring(v, "dostr", -1);
  sq_newclosure(v, &dostr_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'dostr'");
  }

  sq_pushstring(v, "mount", -1);
  sq_newclosure(v, &mount_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".ssb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'mount'");
  }

  sq_pushstring(v, "unmount", -1);
  sq_newclosure(v, &unmount_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'unmount'");
  }

  sq_pushstring(v, "getdir", -1);
  sq_newclosure(v, &getdir_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getdir'");
  }

  sq_pushstring(v, "getWriteDir", -1);
  sq_newclosure(v, &getWriteDir_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getWriteDir'");
  }

  sq_pushstring(v, "getPrefDir", -1);
  sq_newclosure(v, &getPrefDir_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".ss");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getPrefDir'");
  }

  sq_pushstring(v, "setWriteDir", -1);
  sq_newclosure(v, &setWriteDir_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setWriteDir'");
  }

  sq_pushstring(v, "createDir", -1);
  sq_newclosure(v, &createDir_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'createDir'");
  }

  sq_pushstring(v, "fileRead", -1);
  sq_newclosure(v, &fileRead_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fileRead'");
  }

  sq_pushstring(v, "fileWrite", -1);
  sq_newclosure(v, &fileWrite_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".ss");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fileWrite'");
  }

  sq_pushstring(v, "fileAppend", -1);
  sq_newclosure(v, &fileAppend_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".ss");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fileAppend'");
  }

  sq_pushstring(v, "fileExists", -1);
  sq_newclosure(v, &fileExists_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fileExists'");
  }

  sq_pushstring(v, "fileDelete", -1);
  sq_newclosure(v, &fileDelete_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'fileDelete'");
  }

  sq_pushstring(v, "isdir", -1);
  sq_newclosure(v, &isdir_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'isdir'");
  }

  sq_pushstring(v, "lsdir", -1);
  sq_newclosure(v, &lsdir_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'lsdir'");
  }

  sq_pushstring(v, "clearScreen", -1);
  sq_newclosure(v, &clearScreen_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'clearScreen'");
  }

  sq_pushstring(v, "setDrawTarget", -1);
  sq_newclosure(v, &setDrawTarget_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setDrawTarget'");
  }

  sq_pushstring(v, "getDrawTarget", -1);
  sq_newclosure(v, &getDrawTarget_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getDrawTarget'");
  }

  sq_pushstring(v, "resetDrawTarget", -1);
  sq_newclosure(v, &resetDrawTarget_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'resetDrawTarget'");
  }

  sq_pushstring(v, "drawImage", -1);
  sq_newclosure(v, &drawImage_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawImage'");
  }

  sq_pushstring(v, "drawImagePart", -1);
  sq_newclosure(v, &drawImagePart_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawImagePart'");
  }

  sq_pushstring(v, "drawImageEx", -1);
  sq_newclosure(v, &drawImageEx_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawImageEx'");
  }

  sq_pushstring(v, "setDrawColor", -1);
  sq_newclosure(v, &setDrawColor_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setDrawColor'");
  }

  sq_pushstring(v, "loadImage", -1);
  sq_newclosure(v, &loadImage_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'loadImage'");
  }

  sq_pushstring(v, "loadImageKey", -1);
  sq_newclosure(v, &loadImageKey_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".sb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'loadImageKey'");
  }

  sq_pushstring(v, "setBackgroundColor", -1);
  sq_newclosure(v, &setBackgroundColor_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setBackgroundColor'");
  }

  sq_pushstring(v, "setScaling", -1);
  sq_newclosure(v, &setScaling_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setScaling'");
  }

  sq_pushstring(v, "setScalingFilter", -1);
  sq_newclosure(v, &setScalingFilter_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setScalingFilter'");
  }

  sq_pushstring(v, "setResolution", -1);
  sq_newclosure(v, &setResolution_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setResolution'");
  }

  sq_pushstring(v, "screenW", -1);
  sq_newclosure(v, &screenW_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'screenW'");
  }

  sq_pushstring(v, "screenH", -1);
  sq_newclosure(v, &screenH_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'screenH'");
  }

  sq_pushstring(v, "windowW", -1);
  sq_newclosure(v, &windowW_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'windowW'");
  }

  sq_pushstring(v, "windowH", -1);
  sq_newclosure(v, &windowH_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'windowH'");
  }

  sq_pushstring(v, "newTexture", -1);
  sq_newclosure(v, &newTexture_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'newTexture'");
  }

  sq_pushstring(v, "textureSetBlendMode", -1);
  sq_newclosure(v, &textureSetBlendMode_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'textureSetBlendMode'");
  }

  sq_pushstring(v, "keyPress", -1);
  sq_newclosure(v, &keyPress_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'keyPress'");
  }

  sq_pushstring(v, "keyDown", -1);
  sq_newclosure(v, &keyDown_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'keyDown'");
  }

  sq_pushstring(v, "keyRelease", -1);
  sq_newclosure(v, &keyRelease_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'keyRelease'");
  }

  sq_pushstring(v, "keyPressAny", -1);
  sq_newclosure(v, &keyPressAny_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'keyPressAny'");
  }

  sq_pushstring(v, "mouseDown", -1);
  sq_newclosure(v, &mouseDown_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'mouseDown'");
  }

  sq_pushstring(v, "mousePress", -1);
  sq_newclosure(v, &mousePress_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'mousePress'");
  }

  sq_pushstring(v, "mouseRelease", -1);
  sq_newclosure(v, &mouseRelease_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'mouseRelease'");
  }

  sq_pushstring(v, "mouseX", -1);
  sq_newclosure(v, &mouseX_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'mouseX'");
  }

  sq_pushstring(v, "mouseY", -1);
  sq_newclosure(v, &mouseY_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'mouseY'");
  }

  sq_pushstring(v, "getQuit", -1);
  sq_newclosure(v, &getQuit_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getQuit'");
  }

  sq_pushstring(v, "joyCount", -1);
  sq_newclosure(v, &joyCount_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyCount'");
  }

  sq_pushstring(v, "joyName", -1);
  sq_newclosure(v, &joyName_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyName'");
  }

  sq_pushstring(v, "joyX", -1);
  sq_newclosure(v, &joyX_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyX'");
  }

  sq_pushstring(v, "joyY", -1);
  sq_newclosure(v, &joyY_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyY'");
  }

  sq_pushstring(v, "joyZ", -1);
  sq_newclosure(v, &joyZ_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyZ'");
  }

  sq_pushstring(v, "joyH", -1);
  sq_newclosure(v, &joyH_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyH'");
  }

  sq_pushstring(v, "joyV", -1);
  sq_newclosure(v, &joyV_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyV'");
  }

  sq_pushstring(v, "joyR", -1);
  sq_newclosure(v, &joyR_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyR'");
  }

  sq_pushstring(v, "joyL", -1);
  sq_newclosure(v, &joyL_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyL'");
  }

  sq_pushstring(v, "joyAxis", -1);
  sq_newclosure(v, &joyAxis_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyAxis'");
  }

  sq_pushstring(v, "joyHatDown", -1);
  sq_newclosure(v, &joyHatDown_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyHatDown'");
  }

  sq_pushstring(v, "joyHatPress", -1);
  sq_newclosure(v, &joyHatPress_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyHatPress'");
  }

  sq_pushstring(v, "joyHatRelease", -1);
  sq_newclosure(v, &joyHatRelease_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyHatRelease'");
  }

  sq_pushstring(v, "joyButtonPress", -1);
  sq_newclosure(v, &joyButtonPress_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyButtonPress'");
  }

  sq_pushstring(v, "joyButtonDown", -1);
  sq_newclosure(v, &joyButtonDown_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyButtonDown'");
  }

  sq_pushstring(v, "joyButtonRelease", -1);
  sq_newclosure(v, &joyButtonRelease_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyButtonRelease'");
  }

  sq_pushstring(v, "joyPressAny", -1);
  sq_newclosure(v, &joyPressAny_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyPressAny'");
  }

  sq_pushstring(v, "joyAxisPress", -1);
  sq_newclosure(v, &joyAxisPress_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyAxisPress'");
  }

  sq_pushstring(v, "joyAxisRelease", -1);
  sq_newclosure(v, &joyAxisRelease_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'joyAxisRelease'");
  }

  sq_pushstring(v, "keyString", -1);
  sq_newclosure(v, &keyString_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'keyString'");
  }

  sq_pushstring(v, "mouseWheelX", -1);
  sq_newclosure(v, &mouseWheelX_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'mouseWheelX'");
  }

  sq_pushstring(v, "mouseWheelY", -1);
  sq_newclosure(v, &mouseWheelY_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'mouseWheelY'");
  }

  sq_pushstring(v, "jsonRead", -1);
  sq_newclosure(v, &jsonRead_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'jsonRead'");
  }

  sq_pushstring(v, "wait", -1);
  sq_newclosure(v, &wait_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'wait'");
  }

  sq_pushstring(v, "update", -1);
  sq_newclosure(v, &update_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'update'");
  }

  sq_pushstring(v, "getOS", -1);
  sq_newclosure(v, &getOS_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getOS'");
  }

  sq_pushstring(v, "getTicks", -1);
  sq_newclosure(v, &getTicks_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getTicks'");
  }

  sq_pushstring(v, "getFPS", -1);
  sq_newclosure(v, &getFPS_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getFPS'");
  }

  sq_pushstring(v, "setFPS", -1);
  sq_newclosure(v, &setFPS_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setFPS'");
  }

  sq_pushstring(v, "setWindowTitle", -1);
  sq_newclosure(v, &setWindowTitle_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setWindowTitle'");
  }

  sq_pushstring(v, "setWindowIcon", -1);
  sq_newclosure(v, &setWindowIcon_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'setWindowIcon'");
  }

  sq_pushstring(v, "getFrames", -1);
  sq_newclosure(v, &getFrames_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'getFrames'");
  }

  sq_pushstring(v, "displayW", -1);
  sq_newclosure(v, &displayW_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'displayW'");
  }

  sq_pushstring(v, "displayH", -1);
  sq_newclosure(v, &displayH_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'displayH'");
  }

  sq_pushstring(v, "bruxVersion", -1);
  sq_newclosure(v, &bruxVersion_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'bruxVersion'");
  }

  sq_pushstring(v, "toggleFullscreen", -1);
  sq_newclosure(v, &toggleFullscreen_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'toggleFullscreen'");
  }

  sq_pushstring(v, "randFloat", -1);
  sq_newclosure(v, &randFloat_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'randFloat'");
  }

  sq_pushstring(v, "randInt", -1);
  sq_newclosure(v, &randInt_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'randInt'");
  }

  sq_pushstring(v, "distance2", -1);
  sq_newclosure(v, &distance2_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'distance2'");
  }

  sq_pushstring(v, "inDistance2", -1);
  sq_newclosure(v, &inDistance2_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'inDistance2'");
  }

  sq_pushstring(v, "distance3", -1);
  sq_newclosure(v, &distance3_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'distance3'");
  }

  sq_pushstring(v, "wrap", -1);
  sq_newclosure(v, &wrap_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'wrap'");
  }

  sq_pushstring(v, "floor", -1);
  sq_newclosure(v, &floor_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'floor'");
  }

  sq_pushstring(v, "ceil", -1);
  sq_newclosure(v, &ceil_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'ceil'");
  }

  sq_pushstring(v, "round", -1);
  sq_newclosure(v, &round_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'round'");
  }

  sq_pushstring(v, "pointAngle", -1);
  sq_newclosure(v, &pointAngle_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'pointAngle'");
  }

  sq_pushstring(v, "abs", -1);
  sq_newclosure(v, &abs_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'abs'");
  }

  sq_pushstring(v, "lendirX", -1);
  sq_newclosure(v, &lendirX_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'lendirX'");
  }

  sq_pushstring(v, "lendirY", -1);
  sq_newclosure(v, &lendirY_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'lendirY'");
  }

  sq_pushstring(v, "binstr", -1);
  sq_newclosure(v, &binstr_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'binstr'");
  }

  sq_pushstring(v, "drawCircle", -1);
  sq_newclosure(v, &drawCircle_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawCircle'");
  }

  sq_pushstring(v, "drawRec", -1);
  sq_newclosure(v, &drawRec_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawRec'");
  }

  sq_pushstring(v, "drawRect", -1);
  sq_newclosure(v, &drawRect_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawRect'");
  }

  sq_pushstring(v, "drawPoint", -1);
  sq_newclosure(v, &drawPoint_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawPoint'");
  }

  sq_pushstring(v, "drawLine", -1);
  sq_newclosure(v, &drawLine_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawLine'");
  }

  sq_pushstring(v, "drawLineWide", -1);
  sq_newclosure(v, &drawLineWide_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawLineWide'");
  }

  sq_pushstring(v, "hitLineLine", -1);
  sq_newclosure(v, &hitLineLine_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'hitLineLine'");
  }

  sq_pushstring(v, "hitLineCircle", -1);
  sq_newclosure(v, &hitLineCircle_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'hitLineCircle'");
  }

  sq_pushstring(v, "hitLinePoint", -1);
  sq_newclosure(v, &hitLinePoint_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'hitLinePoint'");
  }

  sq_pushstring(v, "spriteName", -1);
  sq_newclosure(v, &spriteName_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'spriteName'");
  }

  sq_pushstring(v, "findSprite", -1);
  sq_newclosure(v, &findSprite_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".s");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'findSprite'");
  }

  sq_pushstring(v, "newSprite", -1);
  sq_newclosure(v, &newSprite_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".sb|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'newSprite'");
  }

  sq_pushstring(v, "newSpriteFT", -1);
  sq_newclosure(v, &newSpriteFT_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'newSpriteFT'");
  }

  sq_pushstring(v, "drawSprite", -1);
  sq_newclosure(v, &drawSprite_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawSprite'");
  }

  sq_pushstring(v, "drawSpriteEx", -1);
  sq_newclosure(v, &drawSpriteEx_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawSpriteEx'");
  }

  sq_pushstring(v, "drawSpriteMod", -1);
  sq_newclosure(v, &drawSpriteMod_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawSpriteMod'");
  }

  sq_pushstring(v, "drawSpriteExMod", -1);
  sq_newclosure(v, &drawSpriteExMod_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawSpriteExMod'");
  }

  sq_pushstring(v, "deleteSprite", -1);
  sq_newclosure(v, &deleteSprite_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'deleteSprite'");
  }

  sq_pushstring(v, "spriteW", -1);
  sq_newclosure(v, &spriteW_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'spriteW'");
  }

  sq_pushstring(v, "spriteH", -1);
  sq_newclosure(v, &spriteH_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'spriteH'");
  }

  sq_pushstring(v, "replaceSprite", -1);
  sq_newclosure(v, &replaceSprite_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nsb|nb|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'replaceSprite'");
  }

  sq_pushstring(v, "spriteSetBlendMode", -1);
  sq_newclosure(v, &spriteSetBlendMode_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'spriteSetBlendMode'");
  }

  sq_pushstring(v, "newFont", -1);
  sq_newclosure(v, &newFont_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|nb|nb|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'newFont'");
  }

  sq_pushstring(v, "drawText", -1);
  sq_newclosure(v, &drawText_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|nb|nb|ns");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'drawText'");
  }

  sq_pushstring(v, "chint", -1);
  sq_newclosure(v, &chint_wrapper, 0);
  sq_setparamscheck(v, SQ_MATCHTYPEMASKSTRING, ".b|n");
  if(SQ_FAILED(sq_createslot(v, -3))) {
    throw SquirrelError(v, "Couldn't register function 'chint'");
  }

}

} // namespace scripting

/* EOF */
